@using Microsoft.AspNetCore.Identity
@model List<Writing.Platform.Models.ViewModel.BlogPostDetails>
@inject UserManager<IdentityUser> userManager
@{
    ViewData["Title"] = "Home Page";
}

<div class="container">
    <div class="row">
        <div class="col-md-8 col-12">
            @if (Model != null && Model.Any())
            {
                @foreach (var post in Model)
                {
                    if (post.IsPublished)
                    {
                        <div class="d-flex align-items-center p-2 mb-3" style="box-shadow: 0 0.5px 0px gray;">

                            <div class="flex-grow-1 ms-1">
                                <div class="d-flex align-items-center">
                                    <img src="https://res.cloudinary.com/blog-image-upload/image/upload/v1741793790/muk8qxdg55nomxqeaca4.png" alt="author" class="rounded-circle me-2" width="40" height="40">
                                    <div>
                                        <strong>@post.Author</strong> • <span class="text-muted">Follow </span>
                                        <p class="text-muted small"> @post.PublishDate.ToShortDateString()</p>
                                    </div>
                                </div>
                                <a asp-area="" asp-controller="Blog" asp-action="Index" asp-route-urlHandle="@post.UrlHandle" class="text-decoration-none">
                                    <p class="fw-bold text-dark">@post.Title</p>
                                </a>
                                <p class="" style="font-size:0.9rem">@post.ShortDescription</p>
                                <div class="d-flex gap-2 align-items-center">
                                    <a id="BtnLike" style="cursor:pointer" onclick="AddLikeToBlog('@post.Id')">
                                        <span><i class="bi bi-heart text-secondary"></i></span>
                                        @if (post.TotalLikes > 0)
                                        {
                                            <span class="text-secondary " style="font-size:0.9rem">@post.TotalLikes</span>
                                        }
                                    </a>
                                    <a>
                                        <i class="bi bi-chat-right text-secondary"></i>
                                        <span class="text-secondary" style="font-size:0.9rem">132</span>
                                    </a>
                                    @foreach (var genre in post.Genres)
                                    {
                                        <span class="text-secondary" style="font-size:0.9rem">@genre.Name</span>
                                    }
                                </div>
                            </div>
                            <img src="@post.FeatureImageUrl" class="img-fluid rounded object-fit-cover" style="width:120px" alt="poster">
                        </div>

                    }

                }


            }



        </div>
        <div class="col-md-4 col-12">
            <div class="accordion" id="accordionExample">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                            Top 50 works by genre
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                            Top 50 works by rating
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                            Top 50 works by Comments
                        </button>
                    </h2>
                    <div id="collapseThree" class="accordion-collapse collapse" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>



@section scripts {
    <script>
        async function AddLikeToBlog(postid){
            fetch('/api/BlogLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'Application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify(
                    {
                        BlogPostId: postid,
                        UserId: '@userManager.GetUserId(User)'
                    }
                )
            }).then(console.log('ok'));
        };

    </script>

}